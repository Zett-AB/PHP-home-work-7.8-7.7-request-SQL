<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="normalize.css">
</head>

<body>
    <main>
        <header>
            <h1>
                Домашняя работа по SQL запросам JOIN
            </h1>
            <h4 class="subtitle">
                Работа по урокам 7.7. и 7.8
            </h4>
        </header>
        <section class="code-php">
            <?php
            $nickname = "Александр";
            $hello = "Привет ";
            $offer = "Выполняем домашнее задание по пройденым темам на курсах по РНР.<br>
                      Данное задание касается взаимодействие между PHP и MySQL.<br><br>
                      Суть задания применить на практике полученные знания по работе с БД SQL и запросами к таблицам БД <br>
                      с последующим выводом данных из таблиц БД в браузер с помощью кода РНР.";

            echo "<h2 class='subtitle-php'>" . $hello . $nickname . "</h2>";
            echo "<h4 class='subtitle-php-4'>" . $offer . "</h4>";
            ?>

        </section>
        <section class="begin">
            <div class="bg-task">
                <div class="task_one">
                    <h5 class="subtitle-task">
                        Задание 1
                    </h5>
                    <p>
                        Создаем новую таблицу <span class="new-table">description</span> в нашей БД study7.2lesson и заполняем её данными из таблицы movie.
                    </p>
                </div>
                <div class="task_two">
                    <h5 class="subtitle-task">
                        Задание 2
                    </h5>
                    <p>
                        Проведите эксперименты с запросами INNER, LEFT и RIGHT JOIN в PhpMyAdmin
                    </p>
                </div>
                <div class="task_three">
                    <h5 class="subtitle-task">
                        Задание 3
                    </h5>
                    <p>
                        Напишите эти же запросы на PHP и выведите данные в браузер
                    </p>
                </div>
            </div>
            <div class="bg-work">
                <p>
                    Выполнять задания лучше всего по очереди начиания с первого.<br>
                    Первые два задания необходимо выполнить непосредственно в БД через панель управления phpMyAdmin.<br>
                    Последнее задание неоьходимо выполнить непосредственно уже написанием кода РНР в редакторе кода с последующей проверкой в браузере.
                </p>
            </div>
            <div class=""></div>
        </section>
        <section class="home-work-one">
            <div class="new-table">
                <h5 class="subtitle-task">
                    Выполнение задания № 1
                </h5>
                <p>
                    Заходим в панель управления(админ. панель) phpMyAdmin и находим нашу БД(в моем случаи это БД - study7.2lesson).<br>
                    Активируем нашу таблицу(наводим мышку на нашу таблицу и жмем кнопку).<br>
                    При активации БД откроется дерево в виде таблиц и их названий, там уже должны быть наши ранее созданные таблицы - movie и categories.<br>
                    Выше видим надпись - Новая, если мы на неё нажмен, то таким образом, создадим новую таблицу в наше БД.<br>
                    Теперь давайте созданим новую таблицу под названием descriptions, в которой будет храниться и записываться информация описания фильмов/сериалов.
                </p>
            </div>
            <div>
                <p>
                    Когда у нас открылась вкладка для новой таблицы, начинаем её заполнение.<br>
                </p>
                <ol>
                    <li>
                        <p>
                            Заполняем имя таблицы и количество колонок:<br>
                        </p>
                        <ul>
                            <li>
                                <p>
                                    в поле "Имя таблицы" пишем её название - <b>descriptions</b>;
                                </p>
                            </li>
                            <li>
                                <p>
                                    в поле "Добавить" указывавем количество колонок - <b>2</b>.
                                </p>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <p>
                            Переходим к заполнению первой колонки:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    в поле "Имя" в первой строке пишем - <b> id</b>;
                                </p>
                            </li>
                            <li>
                                <p>
                                    в поле "Тип" в первой строке выбираем - <b>INT</b>;<br>
                                    <span>
                                        (выбираем <b>INT</b>, так как он представляет целые числа от -2147483648 до 2147483647, а вот <b>TINYINT</b>, например, представляет целые числа от -128 до 127, более подробно смотри в типы MySQL);
                                    </span>
                                </p>
                            </li>
                            <li>
                                <p>
                                    в поле "Длина/Значение" в первой строке пишем - 5;<br>
                                    <span>
                                        (т.е. указывавем, что в нашу таблицу можно добавить 999999 записи)
                                    </span>
                                </p>
                            </li>
                            <li>
                                <p>
                                    в поле "Индекс" в первой строке выбираем - <b>PRIMERY</b>;<br>
                                    <span>
                                        (выбираем этот индекс, так как в нашем случаи мы говорим таблице, что id может быть только один единственный)
                                    </span>
                                </p>
                            </li>
                            <li>
                                <p>
                                    в поле "A_I" ставим галочку;<br>
                                    <span>
                                        (здесь мы задаем команду, чтобы таблица сама автоматически присваивала id следующий порядковый номер)
                                    </span>
                                </p>
                            </li>
                        </ul>
                    </li>
                    <li>
                        <p>
                            Переходим к заполнению второй колонки:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    в поле "Имя" пишем - <b>description</b>;
                                </p>
                            </li>
                            <li>
                                <p>
                                    в поле "Тип" выбираем - <b>TEXT</b>;
                                </p>
                            </li>
                            <li>
                                <p>
                                    в поле "Длина/Значение" пишем - <b>500</b>.<br>
                                    (в данном поле указываем количество символов)
                                </p>
                            </li>
                        </ul>
                    </li>
                </ol>
                <p>
                    Для завершения создания нашей таблицы жмем кнопку "Сохранить"
                </p>
                <p>
                    Видим, точ открылась вкладка "Структура" в которой мы видим созданную нами таблицу descriptions.<br>
                    Для заполнения полей таблицы жмем вкладку "Вставить"
                </p>
                <p>
                    В открывшейся вкладке заполняем в первой колонке следующие столбцы:<br>
                    - в столбце id в поле "Значение" ставим 1;<br>
                    - в столбце description в поле "Значение" пишем описание фильма у которго в таблице movie id имеет занчение 1(в нашем примере пишем описание к фильму "Матрица" - напишем "описание фильма Матрица").
                </p>
                <p>
                    После заполнения указанных полей в первой колонке переходим к заполнению второй колонки.<br>
                    Во второй колонке на надо будет заполнить только столбец description, так как столбец id у нас заполняется автоматически.<br>
                    В стоблце description второй колонки в поле "Значение" пишем описание к фильму Исталлер(в нашем случаи напишем - Это описание фильма Инсталлер).
                </p>
                <p>
                    Теперь жмем кнопку "Вперед" и видим, что у нашей таблице descriptions две колонки и нехватает описание к сериалу "Во все тяжкие."
                </p>
                <p>
                    <span class="dop_info_table">
                        Есть два варинта заполнения, а именно когда мы заполнянли впервый раз колонки нашей таблицы, то по умолчанию нам открылось для заполнения две колонки, когда мы их заполненили, чтобы продолжить заполнение данными нам потребовалась еще одна колонка, сделать это просто, в низу окна есть поле "Продолжить вставку с" и поле в котором по умолчанию стоит цифра 2, мы увеличиваем её 3 и у нас открывается новая колонка для заполнения.<br>
                        Это и удобно с одной стороны, когда информации немного и нам нужно заполнить и создать в таблице от 3 до 5 или 10 колонок/строк, однако если нужно создать больше строк/колонок, то лучше после заполнения 5 строк/колонок нажать кнопку "Вперед", чтобы сохранить внесенные нами данные и продолжить заполнять новые строки/колонки.
                    </span>
                </p>
                <p>
                    Теперь нам надо добавить описание к сериалу "Во все тяжкие" и для этого нам надо создать новую колонку.<br>
                    Для создания новой колонки(третьей) жмем вкладку "Вставить" заполняем в столюце description поле "Значение" в котором пишем "Описание сериала "Во все тяжкие"".<br>
                    Жмем кнопку "Вперед".
                </p>
            </div>
            <div>
                <p>
                    Все первое задание выполнено - таблица descriptions создана и заполнена.<br>
                    Переходим к выполнению второго задания.
                </p>
            </div>
        </section>
        <section class="home-work-two">
            <div class="bd_mysql">
                <h5 class="subtitle-task">
                    Выполнение задания № 2
                </h5>
                <p>
                    Данное задание мы также будем выполнять в панели управления phpMyAdmin.<br>
                    В ходе выполнения данного задания мы будем объединять таблицы с помощью разных операторов ранее нами изученных, а именно SELECT, INSERT INTO, INNER, UPDATE, DELETE,INNER JOIN, LEFT JOIN, RIGHT JOIN.
                </p>
                <div class="bd_mysql_opert">
                    <ul class="bd_msql_opert_enu">
                        <p>
                            Краткое напоминание о наиболее важных командах в SQL:
                        </p>
                        <li>
                            <b>SELECT</b> - Извлекает данные из базы данных
                        </li>
                        <li>
                            <b>UPDATE</b> - обновляет данные в базе данных
                        </li>
                        <li>
                            <b>DELETE</b> - Удаление данных из базы данных
                        </li>
                        <li>
                            <b>INSERT INTO</b> - Вставка новых данных в базу данных
                        </li>
                        <li>
                            <b>CREATE DATABASE</b> - создает новую базу данных
                        </li>
                        <li>
                            <b>ALTER DATABASE</b> - изменяет базу данных
                        </li>
                        <li>
                            <b>CREATE TABLE</b> - Создание новой таблицы
                        </li>
                        <li>
                            <b>DROP TABLE</b> - Удаление таблицы
                        </li>
                        <li>
                            <b>CREATE INDEX</b> - создает индекс (ключ поиска)
                        </li>
                        <li>
                            <b>DROP INDEX</b> - Удаляет индекс
                        </li>
                    </ul>
                </div>
                <p>
                    Однако для выполнения данного задания нам потребуются не все перечисленные выше операторы, а только те которые которые мы изучили и указали их в самом начале.
                </p>
                <p>
                    Оператор/инструкция <b>SELECT</b> - используется для выбора данных из базы данных.<br>
                    Синтаксис:<br>
                    SELECT column1, column2, ... FROM table_name;<br>
                    где<br>
                    column1, column2, ... - имена полей таблицы, из которой вы хотите выбрать данные.<br>
                    table_name - имя таблицы .<br>
                    Если нам надо выбрать все поля то синтаксис будет:<br>
                    SELECT * FROM table_name;
                </p>
                <p>
                    Оператор/инструкция <b>UPDATE</b> - используется для изменения существующих записей в таблице.<br>
                    Синтаксис:<br>
                    UPDATE table_name SET column1=volue1, column2=volue2, ... WHERE condition;<br>
                    где<br>
                    column - стобец в котором надо поменять/обновить информацию<br>
                    volue - новаф информация, которую нужно внести в данный столбец<br>
                    WHERE - предложение к инструкции, которое указывает, какие записи должны быть обновлены(если не указать будут обновлены все записи)<br>
                    condition - строка/строки в которой/которых необходимо обновить информацию в таблице.<br>
                    (Пример:<br>
                    UPDATE Customers<br>
                    SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'<br>
                    WHERE CustomerID = 1; )
                </p>
                <p>
                    DELETE - удаление существующих записей в таблице.<br>
                    Синтаксис:<br>
                    DELETE FROM table_name WHERE condition;<br>
                    Обратите внимание на предложение WHERE в инструкции DELETE.<br>
                    Предложение WHERE указывает, какие записи должны быть удалены.<br>
                    Если опустить предложение WHERE, все записи в таблице будут удалены!
                </p>
                <p>
                    INSERT INTO - используется для вставки новых записей в таблице.<br>
                    Синтаксис:<br>
                    INSERT INTO table_name(column1, column2, ...) VALUS (value1, value2, ...);<br>
                    в данном варианте мы определяет как имена столбцов, так и вставляемые значения.<br>
                    INSERT INTO table_name VALUES (value1, value2, ...);<br>
                    При добавлении значений для всех столбцов таблицы не требуется указывать имена столбцов в SQL-запросе. Однако убедитесь, что порядок значений находится в том же порядке, что и столбцы в таблице.
                </p>
                <p>
                    JOIN - используется для объединения строк из двух или более таблиц на основе связанного столбца между ними.<br>
                    LEFT JOIN - возвращает все записи из левой таблицы и совпадающие записи из правой таблицы<br>
                    RIGHT JOIN - возвращает все записи из правой таблицы и совпадающие записи из левой таблицы.
                </p>
            </div>
            <div class="work_bd_msql">
                <p>
                    Теперь после краткого напоминания приступаем к выполнения задания.<br>
                    Заходим в панель управления phpMyAdmin, активируем нашу базу данных study7.2lesson и видим список таблиц - movie, categories, descriptions.
                    Для работы с операторами/инструкциями с нашей БД, нам необходимо зайти во вкладку SQL, где мы будем писать свои запросы и затем смотреть результат.
                </p>
                <p>
                    Создадим первый запрос о выводе данных из наших таблиц путем их объединения, несколькими разными способами.<br>
                    В основном все опрации будем проводит с нашей вновь созданной таблицей descriptions.<br>
                    Ниже будет синтаксис запроса и по необходимости комментарии к нему.<br>
                    И так начнем.
                </p>
                <p>
                    Пишем запрос:<br>
                    SELECT * FROM `descriptions` INNER JOIN movie ON movie.ID=descriptions.id<br>
                    В данном запросе мы выбрали все данные в таблице descriptions и объеденили их с данными из таблицы movie по столбцам id и ID соответсвенно.
                </p>
            </div>
        </section>
        <section class="home-work-three">
            <?php

            $mysqli = new mysqli('localhost', 'root', '', 'study7.2lesson');

            if (mysqli_connect_errno()) {
                printf('Соединение не установлено', mysqli_connect_error());
                exit();
            }

            $mysqli->set_charset('utf8');

            $query = $mysqli->query('SELECT * FROM `movie` RIGHT JOIN categories ON movie.category_id=categories.id');

            $result = $mysqli->query("SELECT * FROM `movie` LEFT JOIN descriptions USING (id)");

            if ($result == TRUE) {

                echo "<p class='str_php'>" . "Таблица <b>descriptions</b> объединена слева с таблицей <b>movie.</b>" . "</p>" . "<br>";
            } else {

                echo "Запись не добавлена!";
            }

            if ($query == TRUE) {

                echo "<p class='str_php'>" . "Таблица <b>categories</b> объединена справа с таблицей <b>movie.</b>" . "</p>";
            } else {

                echo "Таблицы categories и movie не объединены";
            }




            $querys = $mysqli->query("SELECT * FROM `movie` LEFT JOIN `descriptions` ON `movie`.`ID`=`descriptions`.`id`");

            $results = array();
            while ($row = mysqli_fetch_array($querys, MYSQLI_ASSOC)) {
                $results[] = $row;
            }
            print_r($results);

            while ($row = mysqli_fetch_assoc($query)) {
                echo "<p class='str_php'>" . $row['id'] . "&nbsp;&nbsp;" . $row['name'] . "&nbsp;&nbsp;" . $row['year'] . "&nbsp;&nbsp;" . $row['names'] . "</p>" . "<br>";
            }

            while ($row = mysqli_fetch_assoc($result)) {
                echo "<p class='str_php_r'>" . $row['ID'] . "&nbsp;&nbsp;" . $row['name'] . "&nbsp;&nbsp;" . $row['year'] . "&nbsp;&nbsp;" . $row['description'] . "</p>" . "<br>";
            }

            $mysqli->close();
            ?>
        </section>
    </main>
</body>

</html>